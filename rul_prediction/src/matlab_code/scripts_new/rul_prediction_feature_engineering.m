%The features required for remaining useful ife prediction are as follows
% Charge time,
%discharge time,
%Max charge current
%max discharge current
%RUL 
%Capacity drop
%Capacity
%no of cycles
%time to max voltage (3.6V)
%CC time 
%CV time
%state of charge
%state of health
%average_room_temperature
%max_room_temperature
%max_cell_temperature
%average_cell_temperature

base_dir = '/home/yamukelani/source_code/msc_research/rul_prediction/src/datasets/battery_experiments_data/consolidated/cell2/';
dest_dir = '/home/yamukelani/source_code/msc_research/rul_prediction/src/datasets/features/'
features_file_name = "rul_features.csv";
features_path = fullfile(dest_dir, features_file_name)



feature_table_cols = {
'cycle_no', ...
'cycle_rul', ...
'capacity', ...
'cycle_capacity_drop', ...
'charge_cc_time', ...
'cycle_charge_time', ...
'charge_cv_time', ...
'soc', ...
'charge_time', ...
'average_room_temperature', ...
'average_cell_temperature', ...
'max_discharge_voltage', ...
'max_discharge_current', ...
'cycle_discharge_time', ...
'min_charge_voltage', ...
'max_cycle_cell_temperature', ... 
'max_cycle_room_temperature'
};

rul_features = table([], ... 
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
[], ...
'VariableNames', feature_table_cols)

class(rul_features)


data_files_list = dir(base_dir);
data_file_names = {data_files_list.name};
charge_data_files_list = data_file_names(contains(data_file_names, '_charge_','IgnoreCase',true));
disp(['Number of charge files is: ', num2str(length(charge_data_files_list))]);
discharge_data_files_list = data_file_names(contains(data_file_names, 'discharge','IgnoreCase',true));

disp(['Number of discharge file is:: ', num2str(length(discharge_data_files_list))]);

for i = 1:length(discharge_data_files_list)
    %get the file name
    disp("===============Charge files list======================")
    if i <= 100
        charge_path = fullfile(base_dir, charge_data_files_list{i});
        charge_data = readtable(charge_path);
        
    end;
    disp("===============Discharge files list======================")
    discharge_path = fullfile(base_dir, discharge_data_files_list{i});
    
    discharge_data = readtable(discharge_path);
    rul_features = generate_features(rul_features, charge_data, discharge_data, feature_table_cols);

end

writetable(rul_features, features_path)

function dataset = generate_features(features, battery_charge_data, battery_discharge_data, columns) 
    %Can be obtained from the data sheet.
    total_battery_cycles = 2800;
    nominal_capacity = 6.0; % This is the battery cell nominal capacity as per the data sheet.
    %Add the features for each cycle. 
    max_capacity = max(battery_charge_data.Measured_cell_capacity);                  
    cycle_no = [battery_charge_data.Cycle(1)];
    capacity = [max_capacity];
    capacity_drop_per_cycle = [nominal_capacity - max_capacity];
    cell_rul = [total_battery_cycles - cycle_no];
    max_charge_time = [max(battery_charge_data.Time)];
    cycle_soc = [max_capacity/nominal_capacity];

    %Get constant current
    max_charge_voltage = [max(battery_charge_data.Measured_cell_voltage)];
    charge_cc_time = [max(battery_charge_data.Time(battery_charge_data.Measured_cell_voltage <= max_charge_voltage))];
    time_to_max_voltage =charge_cc_time;

    %Get constant voltage time
    min_charge_voltage = [min(battery_charge_data.Measured_cell_voltage)];
    min_voltage_time = [battery_charge_data.Time(battery_charge_data.Measured_cell_voltage == min_charge_voltage)];
    max_voltage_time = [max(battery_charge_data.Time(battery_charge_data.Measured_cell_voltage == max_charge_voltage))];
    charge_cv_time = [max(min_voltage_time - max_voltage_time)];
    max_charge_room_temperature = [max(battery_charge_data.Room_temperature)];
    avg_charge_room_temperature = [mean(battery_charge_data.Room_temperature)];
    avg_cycle_cell_temperature = [mean(battery_charge_data.Cell_temperature)];
    max_charge_cell_temperature = max(battery_charge_data.Cell_temperature);
    max_charge_current = [max(battery_charge_data.Measured_cell_current)];
    max_charge_voltage = [max(battery_charge_data.Measured_cell_voltage)];
    max_discharge_current = [max(battery_charge_data.Measured_cell_current)];
    max_discharge_voltage = [max(battery_charge_data.Measured_cell_voltage)];
    cycle_charge_time = [max(battery_charge_data.Time)];
    cycle_discharge_time = [max(battery_discharge_data.Time)];
    time_at_max_voltage = battery_charge_data.Time(battery_charge_data.Measured_cell_voltage == max_charge_voltage);


    row = table(cycle_no, ...
        cell_rul, ... 
        capacity, ... 
        capacity_drop_per_cycle, ...
        cycle_charge_time, ...
        charge_cv_time, ...
        charge_cc_time, ... 
        min_charge_voltage, ...
        max_charge_current, ...
        max_charge_room_temperature, ...
        max_charge_cell_temperature, ...
        avg_charge_room_temperature, ...
        avg_cycle_cell_temperature, ...
        cycle_discharge_time, ...
        max_discharge_current, ...
        max_discharge_voltage, ...
        cycle_soc, ...
        'VariableNames', columns);
    %Create the features dataset
    dataset = [features; row];
;

end
