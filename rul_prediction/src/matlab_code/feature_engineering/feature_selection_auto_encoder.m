%This script performs feature selection using sparse auto encoders , 
% to select the fatures that have a higher correlation with th with the rul


rul_features_dataset = readtable('/home/yamukelani/source_code/msc_research/rul_prediction/src/datasets/features/rul_features.csv') ;

feature_names = {
'cycle_no', ...
'cycle_charge_time', ...
'cycle_discharge_time', ...
'charge_cv_time', ...
'charge_cc_time', ...
'discharge_cv_time', ...
'discharge_cc_time', ...
'max_charge_voltage', ...
'min_charge_voltage', ...
'max_discharge_voltage', ...
'min_discharge_voltage', ...
'min_charge_current', ...
'max_charge_current', ...
'min_discharge_current', ...
'max_discharge_current', ...
'average_charge_room_temperature', ...
'average_discharge_room_temperature', ...
'average_charge_cell_temperature', ...
'average_discharge_cell_temperature', ...
'max_cycle_charge_cell_temperature', ... 
'max_cycle_discharge_cell_temperature', ... 
'min_cycle_charge_cell_temperature', ... 
'min_cycle_discharge_cell_temperature', ... 
'max_charge_cycle_room_temperature', ...
'max_discharge_cycle_room_temperature', ...
'min_charge_cycle_room_temperature', ...
'min_discharge_cycle_room_temperature', ...
'charge_capacity', ...
'discharge_capacity', ...
'cycle_soc', ...
'cycle_dod'
};

rul = rul_features_dataset{:, 'cycle_rul'};
X_features = table(rul_features_dataset{:, feature_names});
X_features_matrix = table2array(X_features);

hidden_size = 50; % This can be vaired as part of the training process
learning_rate = 0.001;
sparsity_reg = 19;
sparsity_prop = 0.1;
epochs = 500;

size(X_features_matrix)

auto_enc = trainAutoencoder(X_features_matrix, hidden_size, ...
    'L2WeightRegularization', learning_rate, ...
    'SparsityRegularization', sparsity_reg, ...
    'SparsityProportion', sparsity_prop, ...
    'MaxEpochs', epochs, ...
    'EncoderTransferFunction', 'logsig', ...
    'DecoderTransferFunction', 'purelin');

    % hiddenSize = 10; % Number of features to keep
    % autoenc = trainAutoencoder(X, hiddenSize, ...
    %     'L2WeightRegularization', 0.001, ...
    %     'SparsityRegularization', 4, ...
    %     'SparsityProportion', 0.05, ...
    %     'MaxEpochs', 100, ...
    %     'EncoderTransferFunction', 'logsig', ...
    %     'DecoderTransferFunction', 'purelin');
        

rul_features = encode(auto_enc, X_features_matrix);
%Get the encoder weights

auto_encoder_weights = auto_enc.EncoderWeights;

featureImportance = sum(abs(auto_encoder_weights), 2);

% Rank features by importance
[sortedImportance, featureIdx] = sort(featureImportance, 'descend');

% Show top features
topFeatures = featureIdx(1:hiddenSize);
disp("Top Selected Feature Indices:");
disp(topFeatures');
heatmap(auto_encoder_weights);
title('Encoder Weights Heatmap');
saveas(gcf, 'encoder_weights_heatmap.png');


size(rul_features)
